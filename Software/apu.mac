; APU.MAC
;
; FORTRAN-80 INTERFACE FOR AM9511
;
; LINK BEFORE FORLIB.REL
;
; THIS CODE IS DESIGNED FOR USE WITH THE Z80 AND THE AM9511A CHIP.
;
;
         EXTRN    ST9511,DA9511
         EXTRN    $AC,$ERR
;
;
         CSEG
         .Z80
;
;
; AM9511 DEFINITIONS ==================================================
;       
AM.SR    EQU      80H                   ; SERVICE REQUEST
AM.SINGL EQU      60H                   ; 16 BIT INTEGER
AM.DOUBL EQU      20H                   ; 32 BIT INTEGER
AM.FIXED EQU      20H                   ; FIXED POINT
AM.FLOAT EQU      00H                   ; 32 BIT FLOAT
;       
AM.NOP   EQU      00H                   ; NO OPERATION
AM.SQRT  EQU      01H                   ; SQUARE ROOT
AM.SIN   EQU      02H                   ; SINE
AM.COS   EQU      03H                   ; COSINE
AM.TAN   EQU      04H                   ; TANGENT
AM.ASIN  EQU      05H                   ; INVERSE SINE
AM.ACOS  EQU      06H                   ; INVERSE COSINE
AM.ATAN  EQU      07H                   ; INVERSE TANGENT
AM.LOG   EQU      08H                   ; COMMON LOG (BASE 10)
AM.LN    EQU      09H                   ; NATURAL LOG (BASE E)
AM.EXP   EQU      0AH                   ; EXPONENTIAL (E^X)
AM.PWR   EQU      0BH                   ; POWER NOS^TOS
AM.ADD   EQU      0CH                   ; ADD
AM.SUB   EQU      0DH                   ; SUBTRACT (NOS-TOS)
AM.MUL   EQU      0EH                   ; MULTIPLY, LOWER HALF
AM.DIV   EQU      0FH                   ; DIVIDE (NOS/TOS)
AM.FADD  EQU      10H                   ; FLOATING ADD
AM.FSUB  EQU      11H                   ; FLOATING SUBTRACT
AM.FMUL  EQU      12H                   ; FLOATING MULTIPLY
AM.FDIV  EQU      13H                   ; FLOATING DIVIDE
AM.CHS   EQU      14H                   ; CHANGE SIGN
AM.CHSF  EQU      15H                   ; FLOATING CHANGE SIGN
AM.MUU   EQU      16H                   ; MULTIPLY, UPPER HALF
AM.PTO   EQU      17H                   ; PUSH TOS TO NOS (COPY)
AM.POP   EQU      18H                   ; POP
AM.XCH   EQU      19H                   ; EXCHANGE TOS AND NOS
AM.PUPI  EQU      1AH                   ; PUSH PI
AM.FLTD  EQU      1CH                   ; 32 BIT TO FLOAT
AM.FLTS  EQU      1DH                   ; 16 BIT TO FLOAT
AM.FIXD  EQU      1EH                   ; FLOAT TO 32 BIT
AM.FIXS  EQU      1FH                   ; FLOAT TO 16 BIT
;       
AM.BUSY  EQU      80H                   ; CHIP IS BUSY
AM.SIGN  EQU      40H                   ; TOS NEGATIVE
AM.ZERO  EQU      20H                   ; TOS ZERO
AM.ERRM  EQU      1EH                   ; MASK FOR ERRORS
AM.CARRY EQU      01H                   ; CARRY/BORROW
;
AM.ENON  EQU      00H                   ; NO ERROR
AM.EDIV0 EQU      10H                   ; DIVIDE BY ZERO
AM.ENEG  EQU      08H                   ; SQRT, LOG OF NEGATIVE
AM.EARG  EQU      18H                   ; ARG ASIN, COS, E^X TOO LARGE
AM.EUND  EQU      04H                   ; UNDERFLOW
AM.EOVF  EQU      02H                   ; OVERFLOW
;
;
; FORTRAN-80 $ERR DEFINITIONS =========================================
;
; THESE ERRORS ARE IN A TABLE WITHIN FORLIB. CALL $ERR IS FOLLOWED
; BY A BYTE WITH THE INDEX IN THE TABLE OF THE ERROR (21H IS THE
; LIMIT, AFTER WHICH ?? IS USED). IF THE HIGH BIT OF THE BYTE IS
; SET, THE ERROR IS FATAL; OTHERWISE UP TO 20 ERRORS ARE ALLOWED
; BEFORE TERMINATION.
;
; OUR USE OF THESE ERRORS IS: DZ = DIVIDE BY ZERO, OV = OVERFLOW
; CN = CONVERSION (REAL TO INTEGER, OR REAL TO AM9511).
; UN = ALL OTHER ERRORS (THINK 'UNKNOWN', MOSTLY UNDERFLOW, IF
; ENABLED).
;
; UNDERFLOW CONDITIONS GO TO ZERO. OVERFLOW GOES TO THE LARGEST
; NUMBER THAT CAN BE EXPRESSED BY THE AM9511. NOTE THAT THE BASIC
; ARITHMETIC FUNCTIONS DO RETURN ADJUSTED EXPONENT AND CORRECT
; MANTISSA ON THE AM9511, BUT THERE IS NO WAY TO USE THAT WITH
; 'NORMAL' FORTRAN PROGRAMS, SO WE SIMPLY ZERO OR CLAMP THE RESULT.
; 
E.FATAL  EQU      80H                   ; ERROR IS FATAL
E.DZ     EQU      9                     ; DZ ERROR (DIVIDE BY 0)
E.OV     EQU      19                    ; OVERFLOW
E.CN     EQU      20                    ; REAL CONVERSION
E.UN     EQU      32                    ; UN ERROR
;
;
; SIGN EXTEND =========================================================
;
SEX      MACRO
         RLA
         SBC      A,A
         ENDM
;
;
;  SEND DATA TO 9511 ==================================================
;
DSEND   MACRO
        PUSH      BC
        LD        BC,DA9511
        OUT       (C),A
        POP       BC
        ENDM    
;
;
;  SEND COMMAND TO 9511 ===============================================
;
CSEND   MACRO
        PUSH      BC
        LD        BC,ST9511
        OUT       (C),A
        POP       BC
        ENDM    
;
;
;  READ DATA FROM 9511 ================================================
;
DREAD   MACRO
        PUSH      BC
        LD        BC,DA9511
        IN        A,(C)
        POP       BC
        ENDM
;
;
;  READ STATUS FROM 9511 ==============================================
;
SREAD   MACRO
        PUSH      BC
        LD        BC,ST9511
        IN        A,(C)
        POP       BC
        ENDM
;
;
; WAIT FOR APU ========================================================
;
WAIT     MACRO
         LOCAL    T
;T:       IN       ST9511
T:       SREAD
         RLCA
         JP       C,T
         ENDM                    
;
;
; LOAD REAL ===========================================================
;
; LOAD REAL FROM [HL] TO AM9511
;
LOADR:   PUSH     BC
         PUSH     HL
         INC      HL
         INC      HL
         LD       A,(HL)                ; MANTISAA HIGH BYTE
         AND      80H                   ; ISOLATE SIGN
         LD       B,A
         INC      HL
         LD       A,(HL)                ; EXPONENT
         OR       A
         JP       Z,LOADR1
         CP       80H+63
         JP       NC,LOADR2
         CP       80H-64
         JP       C,LOADR3
         SUB      80H
         AND      7FH
         OR       B                     ; PUSH IN SIGN
         LD       B,A
         POP      HL
         LD       A,(HL)
;         OUT      DA9511
         DSEND 
         INC      HL
         LD       A,(HL)
;         OUT      DA9511
         DSEND
         INC      HL
         LD       A,(HL)
         OR       80H                   ; EXPLICIT NORMALIZATION BIT
;         OUT      DA9511
         DSEND
         LD       A,B
;         OUT      DA9511
         DSEND
         POP      BC
         RET
LOADR3:  CALL     $ERR                  ; UNDERFLOW (CN)
         DB       E.CN
LOADR1:  POP      HL
         XOR      A                     ; LOAD A ZERO
;         OUT      DA9511
         DSEND
;         OUT      DA9511
         DSEND
;         OUT      DA9511
         DSEND
;         OUT      DA9511
         DSEND
         POP      BC
         RET
LOADR2:  CALL     $ERR                  ; OVERFLOW (CN)
         DB       E.CN
         POP      HL
         LD       A,0FFH                ; LARGEST NUMBER
;         OUT      DA9511
         DSEND
;         OUT      DA9511
         DSEND
;         OUT      DA9511
         DSEND  
         LD       A,3FH
         OR       B
;         OUT      DA9511
         DSEND
         POP      BC
         RET
;
;
; STORE REAL ==========================================================
;
; STORE REAL FROM AM9511 TO [HL].
;
; BECAUSE AN OPERATION THAT SETS THE AM9511 STATUS MAY NOT HAVE BEEN
; PERFORMED, DETERMINE ZERO BY LOOKING AT BIT 23.
;
STORR:   PUSH     BC
;         IN       DA9511                ; 9511 EXPONENT
         DREAD
         LD       B,A
;         IN       DA9511                ; 9511 HIGH MANTISSA
         DREAD
         LD       C,A
         INC      HL                    ; HL=MIDDLE MANTISSA
;         IN       DA9511                ; 9511 MIDDLE MANTISSA
         DREAD
         LD      (HL),A
         DEC      HL                    ; HL=LOW MANTISSA
;         IN       DA9511                ; 9511 LOW MANTISSA
         DREAD
         LD       (HL),A
         LD       A,C
         AND      80H
         JP       Z,STORR1              ; B23=0, ZERO
         INC      HL                    ; HL=MIDDLE MANTISSA
         INC      HL                    ; HL=HIGH MANTISSA
         LD       A,C                   ; STRIP EXPLICIT 1
         AND      7FH
         LD       C,A
         LD       A,B                   ; GET SIGN
         AND      80H
         OR       C                     ; OR IN SIGN
         LD       (HL),A
         INC      HL                    ; HL=EXPONENT
         LD       A,B                   ; STRIP SIGN BIT
         AND      7FH
         LD       B,A
         AND      40H                   ; EXPONENT < 0?
         LD       A,B
         JP       Z,STORR2
         OR       0C0H                  ; YES, SIGN EXTEND
STORR2:  ADD      A,80H                 ; BIAS BY 128
         LD       (HL),A                ; AND STORE
         POP      BC
         RET
STORR1:  POP      BC                    ; ZERO
         XOR      A
         LD       (HL),A                ; (HL=LOW MANTISSA)
         INC      HL
         LD       (HL),A
         INC      HL
         LD       (HL),A
         INC      HL
         LD       (HL),A
         RET
;
;
; REAL / INTEGER*4 =====================================================
;
$DE:     LD       A,AM.FDIV
;;       JP       ROPL
;
;
; REAL OP INTEGER*4 ====================================================
;
ROPL:    PUSH     AF
         EX       DE,HL
         LD       HL,$AC
         CALL     LOADR
         LD       A,(DE)
;         OUT      DA9511
         DSEND
         INC      DE
         LD       A,(DE)
;         OUT      DA9511
         DSEND
         INC      DE
         LD       A,(DE)
;         OUT      DA9511
         DSEND
         INC      DE
         LD       A,(DE)
;         OUT      DA9511
         DSEND
         LD       A,AM.FLTD
;         OUT      ST9511
         CSEND 
         WAIT
         JP       ROPRX
;
;
; REAL + INTEGER*4 =====================================================
;
$AE:     LD       A,AM.FADD
         JP       ROPL
;
;
; REAL - INTEGER*4 =====================================================
;
$SE:     LD       A,AM.FSUB
         JP       ROPL
;
;
; REAL * INTEGER*4 =====================================================
;
$ME:     LD       A,AM.FMUL
         JP       ROPL
;
; REAL / INTEGER =======================================================
;
         PUBLIC   $DA
;
$DA:     LD       A,AM.FDIV
;;       JP       ROPI
;
;
; REAL OP INTEGER =====================================================
;
ROPI:    PUSH     AF
         EX       DE,HL
         LD       HL,$AC
         CALL     LOADR
         LD       A,E
;         OUT      DA9511
         DSEND
         LD       A,D
;         OUT      DA9511
         DSEND
         LD       A,AM.FLTS
;         OUT      ST9511
         CSEND 
         WAIT
         JP       ROPRX
;
;
; REAL + INTEGER =======================================================
;
         PUBLIC   $AA
;
$AA:     LD       A,AM.FADD
         JP       ROPI
;
;
; REAL - INTEGER =======================================================
;
         PUBLIC   $SA
;
$SA:     LD       A,AM.FSUB
         JP       ROPI
;
;
; REAL * INTEGER =======================================================
;
         PUBLIC   $MA
;
$MA:     LD       A,AM.FMUL
         JP       ROPI
;
;
; REAL / REAL ==========================================================
;
         PUBLIC   $DB
;
$DB:     LD       A,AM.FDIV
;;       JP       ROPR
;
;
; REAL OP REAL =========================================================
;
; $AC OP [HL] -> $AC
;
ROPR:    PUSH     AF
         EX       DE,HL
         LD       HL,$AC
         CALL     LOADR
         EX       DE,HL
         CALL     LOADR
ROPRX:   POP      AF
;         OUT      ST9511
         CSEND 
         WAIT
         LD       HL,$AC
         CALL     STORR
;         IN       ST9511
         SREAD
         LD       L,A
         AND      AM.EDIV0
         JP       NZ,ROPR4
         LD       L,A
         AND      AM.EOVF
         LD       A,L
         JP       NZ,ROPR3
         AND      AM.EUND
         JP       NZ,ROPR1
         LD       A,L
         AND      AM.ZERO
         JP       NZ,ROPR2
         LD       A,L
         AND      AM.ERRM
         JP       NZ,ROPR5
         LD       A,L
         RLA
         AND      80H
         OR       1
         RET
ROPR1:   ;;CALL     $ERR
         ;;DB       E.UN
ROPR2:   XOR      A
         LD       H,A
         LD       L,A
         LD       ($AC),HL
         LD       ($AC+2),HL
         RET
ROPR3:   LD       HL,0FFFFH
         LD       ($AC),HL
         RLA
         AND      80H
         OR       7FH
         LD       L,A
         LD       H,3FH
         LD       ($AC),HL
         CALL     $ERR
         DB       E.OV
         RET
ROPR4:   CALL     $ERR
         DB       E.DZ+E.FATAL
ROPR5:   CALL     $ERR
         DB       E.UN+E.FATAL
;
;
; REAL - REAL ==========================================================
;
; $AC - [HL] -> $AC
;
         PUBLIC   $SB
;
$SB:     LD       A,AM.FSUB
         JP       ROPR
;
;
; REAL + REAL ==========================================================
;
; $AC + [HL] -> $AC
;
         PUBLIC   $AB
;
$AB:     LD       A,AM.FADD
         JP       ROPR
;
;
; REAL * REAL ==========================================================
;
; $AC * [HL] -> $AC
;
         PUBLIC   $MB
;
$MB:     LD       A,AM.FMUL
         JP       ROPR
;
;
; REAL ** REAL ========================================================
;
; $AC ** [HL] -> $AC
;
         PUBLIC   $EB
;
$EB:     LD       A,AM.PWR
         JP       ROPR
;
;
; INTEGER / INTEGER ===================================================
;
; DE / HL -> HL
;
         PUBLIC   $D9
;
$D9:     LD      A,E
;         OUT      DA9511
         DSEND
         LD      A,D
;         OUT      DA9511
         DSEND
         LD      A,L         
;         OUT      DA9511
         DSEND
         LD      A,H
;         OUT      DA9511
         DSEND
         LD       A,AM.DIV+AM.SINGL
;         OUT      ST9511
         CSEND
         WAIT
         LD       H,A
         AND      AM.ERRM SHL 1
         JP       NZ,$D9.3
         LD       A,H
         AND      AM.ZERO SHL 1
         JP       Z,$D9.2
;
         XOR      A
         LD       H,A
         LD       L,A
         RET
;
;$D9.2:   IN       DA9511
$D9.2:   DREAD
         LD       H,A
;         IN       DA9511
         DREAD
         LD       L,A
         LD       A,H
         OR       1
         RET
;
$D9.3:   CALL     $ERR
         DB       E.DZ+E.FATAL
;
;
; INTEGER*4 / INTEGER =================================================
;
; $AC / HL -> $AC
;
         PUBLIC   $DY
;
$DY:     PUSH     HL
         LD       HL,($AC)
         LD       A,L
;         OUT      DA9511
         DSEND
         LD       A,H
;         OUT      DA9511
         DSEND
         LD       HL,$AC+2
         LD       A,L
;         OUT      DA9511
         DSEND 
         LD       A,H
;         OUT      DA9511
         DSEND
;
         POP      HL
         LD       A,L
;         OUT      DA9511
         DSEND
         LD       A,H
;         OUT      DA9511
         DSEND
         SEX
;         OUT      DA9511
         DSEND
;         OUT      DA9511
         DSEND 
;
         LD       A,AM.DIV+AM.DOUBL
;         OUT      ST9511
         CSEND
         WAIT
         LD       H,A
         AND      AM.ERRM SHL 1
         JP       NZ,$DY.3
         LD       A,H
         AND      AM.ZERO SHL 1
         JP       Z,$DY.2
;
         XOR      A
         LD       H,A
         LD       L,A
         LD       ($AC),HL
         LD       ($AC+2),HL
         RET
;
;$DY.2:   IN       DA9511
$DY.2:   DREAD
         LD       H,A
;         IN       DA9511
         DREAD
         LD       L,A
         LD       ($AC+2),HL
;         IN       DA9511
         DREAD
         LD       H,A
;         IN       DA9511
         DREAD
         LD       L,A
         LD       ($AC),HL
         LD       A,H
         OR       1
         RET
;
$DY.3:   CALL     $ERR
         DB       E.DZ+E.FATAL
;
;
; INTEGER*4 / INTEGER*4  ==============================================
;
; $AC / [HL] -> $AC
;
         PUBLIC   $D1
;
$D1:     PUSH     HL
         LD       HL,($AC)
         LD       A,L
;         OUT      DA9511
         DSEND
         LD       A,H
;         OUT      DA9511
         DSEND
         LD       HL,($AC+2)
         LD       A,L
;         OUT      DA9511
         DSEND
         LD       A,H
;         OUT      DA9511
         DSEND
;
         POP      HL
         LD       A,(HL)
;         OUT      DA9511
         DSEND 
         INC      HL
         LD       A,(HL)
;         OUT      DA9511
         DSEND
         INC      HL
         LD       A,(HL)
;         OUT      DA9511
         DSEND
         INC      HL
         LD       A,(HL)
;         OUT      DA9511
         DSEND
;
         LD       A,AM.DIV+AM.DOUBL
;         OUT      ST9511
         CSEND
         WAIT
         LD       H,A
         AND      AM.ERRM SHL 1
         JP       NZ,$D1.3
         LD       A,H
         AND      AM.ZERO SHL 1
         JP       Z,$D1.2
;
         XOR      A
         LD       H,A
         LD       L,A
         LD       ($AC),HL
         LD       ($AC+2),HL
         RET
;
;$D1.2:   IN       DA9511
$D1.2:   DREAD
         LD       H,A
;         IN       DA9511
         DREAD
         LD       L,A
         LD       ($AC+2),HL
;         IN       DA9511
         DREAD
         LD       H,A
;         IN       DA9511
         DREAD
         LD       L,A
         LD       ($AC),HL
         LD       A,H
         OR       1
         RET
;
$D1.3:   CALL     $ERR
         DB       E.DZ+E.FATAL
;
;
; INTEGER * INTEGER ===================================================
;
; HL * DE -> HL
;
         PUBLIC   $M9
;
$M9:     LD       A,L
;         OUT      DA9511
         DSEND
         LD       A,H
;         OUT      DA9511
         DSEND
;
         LD       A,E
;         OUT      DA9511
         DSEND
         LD       A,D
;         OUT      DA9511
         DSEND
;
         LD       A,AM.MUL+AM.SINGL
;         OUT      ST9511
         CSEND
         WAIT
         AND      AM.ZERO SHL 1
         JP       Z,$M9.2
;
         XOR      A                     ; Z FLAG
         LD       H,A                   ; RESULT 0
         LD       L,A
         RET
;
;$M9.2:   IN       DA9511
$M9.2:   DREAD
         LD       H,A
;         IN       DA9511
         DREAD
         LD       L,A
         LD       A,H                   ; S FLAG
         OR       1
         RET
;
;
; INTEGER*4 * INTEGER =================================================
;
; $AC * HL -> $AC
;
         PUBLIC   $MY
;
$MY:     LD       A,L
;         OUT      DA9511
         DSEND
         LD       A,H
;         OUT      DA9511
         DSEND
         SEX
;         OUT      DA9511
         DSEND
;         OUT      DA9511
         DSEND
;
         LD       HL,($AC)
         LD       A,L
;         OUT      DA9511
         DSEND         
         LD       A,H
;         OUT      DA9511
         DSEND
         LD       HL,($AC+2)
         LD       A,L
;         OUT      DA9511
         DSEND
         LD       A,H
;         OUT      DA9511
         DSEND
;
         LD       A,AM.MUL+AM.DOUBL
;         OUT      ST9511
         CSEND
         WAIT
         AND      AM.ZERO SHL 1
         JP       Z,$MY.2
;
         XOR      A
         LD       H,A
         LD       L,A
         LD       ($AC),HL
         LD       ($AC+2),HL
         RET
;
;$MY.2:   IN       DA9511
$MY.2:   DREAD
         LD       H,A
;         IN       DA9511
         DREAD
         LD       L,A
         LD       ($AC+2),HL
;         IN       DA9511
         DREAD 
         LD       H,A
;         IN       DA9511
         DREAD 
         LD       L,A
         LD       ($AC),HL
         LD       A,H
         OR       1
         RET
;
;
; INTEGER*4 * INTEGER*4 ===============================================
;
; $AC * [HL] -> $AC
;
         PUBLIC   $M1
;
$M1:     LD       A,(HL)
;         OUT      DA9511
         DSEND         
         INC      HL
         LD       A,(HL)
;         OUT      DA9511
         DSEND
         INC      HL
         LD       A,(HL)
;         OUT      DA9511
         DSEND
         INC      HL
         LD       A,(HL)
;         OUT      DA9511
         DSEND
;
         LD       HL,($AC)
         LD       A,L
;         OUT      DA9511
         DSEND
         LD       A,H
;         OUT      DA9511
         DSEND
         LD       HL,($AC+2)
         LD       A,L
;         OUT      DA9511
         DSEND
         LD       A,H
;         OUT      DA9511
         DSEND
;
         LD       A,AM.MUL+AM.DOUBL
;         OUT      ST9511
         CSEND
         WAIT
         AND      AM.ZERO SHL 1
         JP       Z,$M1.2
;
         XOR      A
         LD       H,A
         LD       L,A
         LD       ($AC),HL
         LD       ($AC+2),HL
         RET
;
;$M1.2:   IN       DA9511
$M1.2:   DREAD
         LD       H,A
;         IN       DA9511
         DREAD 
         LD       L,A
         LD       ($AC+2),HL
;         IN       DA9511
         DREAD
         LD       H,A
;         IN       DA9511
         DREAD
         LD       L,A
         LD       ($AC),HL
         LD       A,H
         OR       1                     ; Z CLEAR, SET SIGN
         RET
;
;
; EXP =================================================================
;
         PUBLIC   EXP
;
EXP:     LD       A,AM.EXP
;;       JP       FUNC
;
;
; FUNC(X) =============================================================
;
; FUNC([HL]) -> $AC
;
FUNC:    PUSH     AF
         CALL     LOADR
         JP       ROPRX
;
;
; ALOG ================================================================
;
         PUBLIC   ALOG
;
ALOG:    LD       A,AM.LN
         JP       FUNC
;
;
; ALOG10 ==============================================================
;
         PUBLIC   ALOG10
;
ALOG10:  LD       A,AM.LOG
         JP       FUNC
;
;
; SIN =================================================================
;
         PUBLIC   SIN
;
SIN:     LD       A,AM.SIN
         JP       FUNC
;
;
; COS =================================================================
;
         PUBLIC   COS
;
COS:     LD       A,AM.COS
         JP       FUNC
;
;
; SQRT ================================================================
;
         PUBLIC   SQRT
;
SQRT:    LD       A,AM.SQRT
         JP       FUNC
;
;
; ATAN ================================================================
;
         PUBLIC   ATAN
;
ATAN:    LD       A,AM.ATAN
         JP       FUNC
;
;
         END
         
